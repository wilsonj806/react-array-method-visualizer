{"version":3,"sources":["atoms/Buttons.js","molecules/Cards.js","organism/Forms.js","organism/Container.js","App.js","Data.analysis.js","index.js"],"names":["Button","undefined","this","props","children","btnType","defaultType","react_default","a","createElement","className","concat","onClick","Component","Card","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleBtn","setState","isInstanced","renderArray","arrayData","length","keyVal","processArray","strArr","state","arrayInstance","toString","resetInstanceArray","initialState","isclicked","toConsumableArray","prevProps","prevState","result","primBtn","_this2","Fragment","Buttons","cardType","key","renderHeading","Form","handleChange","event","value","target","parsedVal","parseInt","isNaN","number","submitForm","handleSubmit","id","type","name","onChange","form","resetArrays","Container","renderFromState","toRender","Error","values","map","val","i","renderCard","intialState","index","renderList","push","newList","App","numArr","entry","array","objectSpread","handleCardAdd","filter","forEach","some","handleCardId","Cards","onResetClick","resetArray","showMapReact","arrMethods","sort","findIndex","reduce","resetNow","btnList","Forms","organism_Container","renderState","component","arr","callback","T","A","k","console","log","TypeError","O","len","arguments","Array","kValue","mappedValue","showNum","num","showForEach","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0e0d02da.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n\r\n  render() {\r\n    if (this.props.children === undefined) return null;\r\n    // Accounting for, if the user doesn't specify a button type\r\n    let defaultType;\r\n    if (this.props.btnType === undefined) {\r\n      defaultType = 'btn--std'\r\n    }\r\n    return (\r\n      <button\r\n        className={`btn ${this.props.btnType} ${defaultType}`}\r\n        onClick={this.props.onClick}\r\n      >\r\n        {this.props.children}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport Button from '../atoms/Buttons';\r\n\r\n// FIXME: rethink when to make the array update the instanced array\r\nclass Card extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.initialState = {\r\n      arrayInstance: [],\r\n      isclicked: false,\r\n      isInstanced: false,\r\n    }\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  componentDidMount() {\r\n    // render array if the property exists and the Card just got rendered\r\n    if (this.props.arrayData) {\r\n      this.setState({arrayInstance:[...this.props.arrayData]});\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // reset if button is clicked\r\n    if (this.state.isclicked !== false) {\r\n      this.setState({isclicked: false});\r\n      return;\r\n    }\r\n    if (prevState.arrayInstance !== this.props.arrayData) {\r\n      this.setState({\r\n        arrayInstance: this.props.arrayData,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleBtn = () => {\r\n    this.setState({isInstanced: true});\r\n  }\r\n\r\n  renderArray = () => {\r\n    if ((this.props.arrayData.length < 1) && (this.props.keyVal === 0)){\r\n      return `Please submit values`;\r\n    }\r\n    if ((this.props.keyVal === 0) || (this.props.arrayData.length > 0)) {\r\n      return `[ ${this.props.arrayData} ]`;\r\n    }\r\n  }\r\n\r\n  processArray = () => {\r\n    if (this.props.keyVal === 0) return;\r\n    let strArr = `[ ${this.state.arrayInstance.toString()} ]`\r\n    return (\r\n      <p\r\n      className=\"card__text\"\r\n      >\r\n        {strArr}\r\n      </p>\r\n    )\r\n  }\r\n\r\n  resetInstanceArray = () => {\r\n    this.setState({arrayInstance: []});\r\n  }\r\n\r\n  render() {\r\n    const props = this.props;\r\n    const keyVal = props.keyVal;\r\n    let result;\r\n    let primBtn;\r\n\r\n\r\n    result = this.processArray(keyVal);\r\n    if (keyVal !== 0) {\r\n      primBtn =\r\n        <>\r\n          <Button\r\n            onClick={() => this.handleBtn()}\r\n          >\r\n            Begin Computation\r\n          </Button>\r\n\r\n          <Button\r\n            btnType=\"btn--reset\"\r\n            onClick={() => this.resetInstanceArray()}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </>\r\n    }\r\n    return (\r\n      <div className={`card ${props.cardType}`}\r\n        key={keyVal}\r\n      >\r\n        <h2 className=\"card__heading\">{this.props.renderHeading(keyVal)}</h2>\r\n        <div className=\"card__content\">\r\n          <p className=\"card__text\">\r\n            {this.renderArray()}\r\n          </p>\r\n          {result}\r\n          <div className=\"card--btns\">\r\n            {primBtn}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\n\r\n// FIXME: can't fully delete input in the text field\r\n// FIXME: pressing Enter shouldn't refresh\r\n\r\nclass Form extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.initialState = {\r\n      number: '',\r\n    }\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  handleChange = event => {\r\n    const {value} = event.target;\r\n    const parsedVal = parseInt(value, 10);\r\n    if (isNaN(parsedVal) || (value === '') || (value.length > 4)) return;\r\n\r\n    this.setState({\r\n      number: parsedVal\r\n    });\r\n  }\r\n\r\n  submitForm = () => {\r\n    this.props.handleSubmit(this.state.number);\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n\r\n  render() {\r\n    const { number } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"ctr--form\">\r\n          <form id=\"form\" className=\"form\">\r\n            <h2 className=\"heading\">Initialize Array</h2>\r\n            <input\r\n              type=\"text\"\r\n              name=\"entry\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n            />\r\n            <input className=\"btn btn--std\"\r\n              form=\"form\"\r\n              type=\"button\"\r\n              value=\"Submit\"\r\n              onClick={this.submitForm}\r\n            />\r\n            <button className=\"btn btn--reset\"\r\n              type=\"button\"\r\n              onClick={this.props.resetArrays}\r\n            >\r\n              Reset\r\n            </button>\r\n          </form>\r\n          {this.props.children}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\n// TODO: if templating handlers is in a different file like App.render.js, update Container.js\r\n\r\nclass Container extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.intialState = {\r\n      index: 0,\r\n    }\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  renderFromState = () => {\r\n    const props = this.props;\r\n    if (!props.toRender) {\r\n      throw new Error('this.props.toRender is undefined');\r\n    }\r\n    // convert the passed state var to an array of boolean values\r\n    const boolArr = Object.values(props.toRender);\r\n    const jsxArr = boolArr.map((val, i) => {\r\n      if (val === true) {\r\n        let jsx = (props.renderCard(i + 1));\r\n        return jsx;\r\n      }\r\n      return undefined;\r\n    });\r\n    return jsxArr;\r\n  }\r\n\r\n  render() {\r\n    const props = this.props;\r\n    const renderList = [];\r\n    // Default card, always needs to be there\r\n    if (props.className === \"ctr--cards\") {\r\n      renderList.push(props.renderCard(0));\r\n    }\r\n    const newList = this.renderFromState();\r\n    renderList.push(newList);\r\n\r\n    return (\r\n      <div\r\n        className=\"ctr--cards\"\r\n      >\r\n        {renderList}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\r\nimport Button from './atoms/Buttons';\r\nimport Card from './molecules/Cards';\r\nimport Form from './organism/Forms';\r\nimport Container from './organism/Container';\r\nimport './index.css';\r\n\r\n// FIXME: consolidate indexing standard, right now its both 0,1,2,3 and 1,2,3,4\r\n// TODO: determine where to import showArray.js(i.e figure out which component is determining the contents of the cards)\r\n// TODO: move templating handlers to a different file like App.render.js\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = {\r\n      toRender: {\r\n        map: false,\r\n        filter: false,\r\n        forEach: false,\r\n        some: false,\r\n        sort: false,\r\n        findIndex: false,\r\n        reduce: false,\r\n      },\r\n      array: [],\r\n      resetNow: false,\r\n    };\r\n    this.state = this.initialState;\r\n  }\r\n  numArr = [1,2,3,4,5,6,7,8];\r\n\r\n  // Event handling methods\r\n\r\n  handleSubmit = (entry) => {\r\n    if (entry === '') return;\r\n    this.setState({array: [...this.state.array, entry]});\r\n  }\r\n\r\n  resetArrays = () => {\r\n    this.setState({\r\n      array: [],\r\n      toRender: {...this.initialState.toRender}\r\n    });\r\n  }\r\n\r\n  // State management\r\n\r\n  handleCardAdd = (keyVal) => {\r\n    switch(keyVal) {\r\n      case 1:\r\n        this.setState({\r\n          toRender: {\r\n            ...this.state.toRender,\r\n            map: !this.state.toRender.map,\r\n          },\r\n        });\r\n        break;\r\n      case 2:\r\n        this.setState({\r\n          toRender: {\r\n            ...this.state.toRender,\r\n            filter: !this.state.toRender.filter,\r\n          },\r\n        });\r\n        break;\r\n      case 3:\r\n        this.setState({\r\n          toRender: {\r\n            ...this.state.toRender,\r\n            forEach: !this.state.toRender.forEach,\r\n          },\r\n        });\r\n        break;\r\n      case 4:\r\n        this.setState({\r\n          toRender: {\r\n            ...this.state.toRender,\r\n            some: !this.state.toRender.some,\r\n          },\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Rendering methods\r\n\r\n  handleCardId = (numArr) => {\r\n    switch(numArr) {\r\n      case 0:\r\n        return 'card--init';\r\n      case 1:\r\n        return 'card--map';\r\n      case 2:\r\n        return 'card--filter';\r\n      case 3:\r\n        return 'card--forEach';\r\n      case 4:\r\n        return 'card--some';\r\n      case 5:\r\n        return 'card--find';\r\n      case 6:\r\n        return 'card--findIndex';\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  renderHeading = i => {\r\n    switch (i) {\r\n      case 0:\r\n        return (\r\n          'Initial State'\r\n        );\r\n      case 1:\r\n        return (\r\n          'Array.map( )'\r\n        );\r\n      case 2:\r\n        return (\r\n          'Array.filter( )'\r\n        );\r\n      case 3:\r\n        return (\r\n          'Array.forEach( )'\r\n        );\r\n      case 4:\r\n        return (\r\n          'Array.some( )'\r\n        );\r\n      default:\r\n      break;\r\n    }\r\n  }\r\n\r\n  renderCard = (i) => {\r\n    const state = this.state;\r\n    return (\r\n      <Card\r\n        key={i}\r\n        keyVal={i}\r\n        cardType={this.handleCardId(i)}\r\n        arrayData={state.array}\r\n        onResetClick={() => this.resetArray()}\r\n        renderHeading={this.renderHeading}\r\n        showMapReact={this.props.arrMethods.showMapReact}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let btnList;\r\n    btnList = this.numArr.map((val) => {\r\n      return (\r\n        <Button\r\n          key={val}\r\n          onClick={() => this.handleCardAdd(val)}\r\n        >\r\n          {this.renderHeading(val)}\r\n        </Button>\r\n      )\r\n    })\r\n    // TODO: eventually make a method for populating ctr--btn by extending Container.js\r\n    return (\r\n      <main>\r\n        <Form\r\n          handleSubmit={this.handleSubmit}\r\n          resetArrays={this.resetArrays}\r\n        >\r\n          <div className=\"ctr--btn\">\r\n            {btnList}\r\n          </div>\r\n        </Form>\r\n        <Container\r\n          numArr={this.numArr}\r\n          className=\"ctr--cards\"\r\n          toRender={this.state.toRender}\r\n          renderCard={this.renderCard}\r\n          renderState={this.state.toRender}\r\n        />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// need to make an array using this otherwise the current array won't have access to the stuff\r\n\r\nfunction showMapReact(component, key, arr, callback) {\r\n  var T, A, k;\r\n  console.log(component.state);\r\n  if (component === null) {\r\n    throw new TypeError('this is null or not defined');\r\n  }\r\n  if (!component.state) {\r\n    throw new TypeError('this is not a React component');\r\n  }\r\n  var O = Object(arr);\r\n  var len = O.length >>> 0;\r\n\r\n\r\n  if (typeof callback !== 'function') {\r\n    throw new TypeError(callback + ' is not a function');\r\n  }\r\n\r\n  if (arguments.length > 1) {\r\n    T = arguments[1];\r\n  }\r\n\r\n  A = new Array(len);\r\n\r\n  k = 0;\r\n\r\n  while (k < len) {\r\n\r\n    var kValue, mappedValue;\r\n\r\n    if (k in O) {\r\n      kValue = O[k];\r\n\r\n      mappedValue = callback.call(T, kValue, k, O);\r\n      A[k] = mappedValue;\r\n    }\r\n    k++;\r\n    component.setState({key:[...A]});\r\n  }\r\n\r\n  return A;\r\n}\r\n\r\nfunction showNum(num) { console.log(num); }\r\n\r\n\r\nfunction showForEach(key,arr, callback) { console.log('hi'); }\r\n\r\nexport { showMapReact , showForEach, showNum };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as arrMethods from './Data.analysis';\r\n\r\nReactDOM.render(<App arrMethods={arrMethods}/>, document.getElementById('root'));\r\n"],"sourceRoot":""}