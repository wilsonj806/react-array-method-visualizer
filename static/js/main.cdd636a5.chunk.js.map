{"version":3,"sources":["Form.js","Cards.js","Container.js","App.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","value","target","parsedVal","parseInt","isNaN","length","setState","number","submitForm","handleSubmit","state","initialState","_this2","react_default","a","createElement","Fragment","className","id","type","name","onChange","form","onClick","resetArrays","handleCardAddFn","Component","Card","renderHeading","i","handleBtn","arrayInstance","arrayData","isclicked","isRendering","renderArray","keyVal","concat","processArray","strArr","toString","resetInstanceArray","prevProps","prevState","result","primBtn","key","Container","intialState","index","renderList","push","renderCardFn","renderState","map","filter","App","entry","array","toConsumableArray","handleCardAdd","toRender","objectSpread","console","log","assertThisInitialized","renderCard","Cards","classNameArray","resetState","resetNow","onResetClick","resetArray","forEach","some","sort","find","isClicked","src_Form","src_Container","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.cdd636a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.initialState = {\r\n      number: '',\r\n    }\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  handleChange = event => {\r\n    const {value} = event.target;\r\n    const parsedVal = parseInt(value, 10);\r\n    if (isNaN(parsedVal) || (value === '') || (value.length > 4)) return;\r\n\r\n    this.setState({\r\n      \"number\": parsedVal\r\n    });\r\n  }\r\n\r\n  submitForm = () => {\r\n    this.props.handleSubmit(this.state.number);\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n\r\n  render() {\r\n    const { number } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"ctr--form\">\r\n          <form id=\"form\" className=\"form\">\r\n            <h2 className=\"heading\">Initialize Array</h2>\r\n            <input\r\n              type=\"text\"\r\n              name=\"entry\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n            />\r\n            <input className=\"btn btn--std\"\r\n              form=\"form\"\r\n              type=\"button\"\r\n              value=\"Submit\"\r\n              onClick={this.submitForm}\r\n            />\r\n            <button className=\"btn btn--reset\"\r\n              type=\"button\"\r\n              onClick={this.props.resetArrays}\r\n            >\r\n              Reset\r\n            </button>\r\n          </form>\r\n\r\n          <div className=\"ctr--btn\">\r\n            <button\r\n            className=\"btn btn--std\"\r\n            onClick={()=>this.props.handleCardAddFn(1)}\r\n            >\r\n              Array.prototype.map( )\r\n            </button>\r\n            <button\r\n            className=\"btn btn--std\"\r\n            onClick={()=>this.props.handleCardAddFn(2)}\r\n            >\r\n              Array.prototype.filter( )\r\n            </button>\r\n\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nclass Card extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.initialState = {\r\n      arrayInstance: [],\r\n      isclicked: false,\r\n      isRendering: false,\r\n    }\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // reset if button is clicked\r\n    if (this.state.isclicked !== false) {\r\n      this.setState({isclicked: false});\r\n      return;\r\n    }\r\n  }\r\n  // move this to App.js\r\n  renderHeading = i => {\r\n    switch (i) {\r\n      case 0:\r\n        return (\r\n          'Initial State'\r\n        );\r\n      case 1:\r\n        return (\r\n          'Array.prototype.map( )'\r\n        );\r\n      case 2:\r\n        return (\r\n          'Array.prototype.filter( )'\r\n        );\r\n      case 3:\r\n        return (\r\n          'Array.prototype.forEach( )'\r\n        );\r\n      case 4:\r\n        return (\r\n          'Array.prototype.some( )'\r\n        );\r\n      default:\r\n      break;\r\n    }\r\n  }\r\n\r\n  handleBtn = () => {\r\n    if (this.state.arrayInstance.length === 0) {\r\n      this.setState({\r\n        arrayInstance: this.props.arrayData,\r\n        isclicked: !this.state.isclicked,\r\n        isRendering: !this.state.isRendering,\r\n      });\r\n    }\r\n\r\n  }\r\n  renderArray = () => {\r\n    if ((this.props.arrayData.length < 1) && (this.props.keyVal === 0)){\r\n      return `Please submit values`;\r\n    }\r\n    if ((this.props.keyVal === 0) || (this.props.arrayData.length > 0)) {\r\n      return `[ ${this.props.arrayData} ]`;\r\n    }\r\n  }\r\n\r\n  processArray = () => {\r\n    if (this.props.keyVal === 0) return;\r\n    let strArr = `[ ${this.state.arrayInstance.toString()} ]`\r\n    return (\r\n      <p\r\n      className=\"card__text\"\r\n      >\r\n        {strArr}\r\n      </p>\r\n    )\r\n  }\r\n\r\n  resetInstanceArray = () => {\r\n    this.setState({arrayInstance: []});\r\n  }\r\n\r\n  render() {\r\n    const keyVal = this.props.keyVal;\r\n    let result;\r\n    let primBtn;\r\n\r\n    if ((this.state.isclicked === true) || (this.state.isRendering === true)) {\r\n      result = this.processArray(this.props.keyVal);\r\n    }\r\n    if (this.props.keyVal !== 0) {\r\n      primBtn =\r\n        <>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn--std\"\r\n            onClick={() => this.handleBtn()}\r\n          >\r\n            Begin Computation\r\n          </button>\r\n          <button\r\n          type=\"button\"\r\n          className=\"btn btn--reset\"\r\n          onClick={() => this.resetInstanceArray()}\r\n          >\r\n            Reset\r\n          </button>\r\n        </>\r\n    }\r\n    return (\r\n      <div className={this.props.className}\r\n        key={keyVal}\r\n      >\r\n        <h2 className=\"card__heading\">{this.renderHeading(keyVal)}</h2>\r\n        <div className=\"card__content\">\r\n          <p className=\"card__text\">\r\n            {this.renderArray()}\r\n          </p>\r\n          {result}\r\n          <div className=\"ctr--btn\">\r\n            {primBtn}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\n\r\nclass Container extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.intialState = {\r\n      index: 0,\r\n    }\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  render() {\r\n    let renderList = [];\r\n    renderList.push(this.props.renderCardFn(0));\r\n    if (this.props.renderState.map === true) {\r\n      renderList.push(this.props.renderCardFn(1));\r\n    }\r\n    if (this.props.renderState.filter === true) {\r\n      renderList.push(this.props.renderCardFn(2));\r\n    }\r\n    return (\r\n      <div\r\n      className=\"ctr--cards\"\r\n      >\r\n        {renderList}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\r\nimport Form from './Form';\r\nimport Card from './Cards';\r\nimport Container from './Container';\r\nimport './index.css';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.initialState = {\r\n      toRender: {\r\n        map: false,\r\n        filter: false,\r\n        forEach: false,\r\n        some: false,\r\n        sort: false,\r\n        find: false,\r\n      },\r\n      array: [],\r\n      resetNow: false,\r\n      isClicked: false,\r\n      classNameArray: [\r\n        \"card card--init\",\r\n        \"card card--map\",\r\n        \"card card--filter\",\r\n        \"card card--forEach\",\r\n        \"card card--some\",\r\n      ],\r\n    };\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  handleSubmit = (entry) => {\r\n    if (entry === '') return;\r\n    this.setState({array: [...this.state.array, entry]});\r\n  }\r\n\r\n  handleCardAdd = (keyVal) => {\r\n    switch(keyVal) {\r\n      case 1:\r\n        this.setState({\r\n          toRender: {\r\n            ...this.state.toRender,\r\n            map: !this.state.toRender.map,\r\n          },\r\n        });\r\n        break;\r\n      case 2:\r\n        this.setState({\r\n          toRender: {\r\n            ...this.state.toRender,\r\n            filter: !this.state.toRender.filter,\r\n          },\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  resetArrays = () => {\r\n    console.log(this);\r\n    this.setState({\r\n      array: [],\r\n      toRender: {...this.initialState.toRender}\r\n    });\r\n  }\r\n\r\n  renderCard = (i) => {\r\n    const state = this.state;\r\n    return (\r\n      <Card\r\n        keyVal={i}\r\n        className={state.classNameArray[i]}\r\n        arrayData={state.array}\r\n        resetState={state.resetNow}\r\n        onResetClick={() => this.resetArray()}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <Form\r\n          handleSubmit={this.handleSubmit}\r\n          handleCardAddFn={this.handleCardAdd}\r\n          resetArrays={this.resetArrays}\r\n          renderCardFn={this.renderCard}\r\n        />\r\n        <Container\r\n        className=\"ctr--cards\"\r\n        renderCardFn={this.renderCard}\r\n        renderState={this.state.toRender}\r\n        />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}